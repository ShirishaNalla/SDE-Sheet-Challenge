
#include <bits/stdc++.h>

void merge(long long *arr,int p,int mid,int q,long long int & count)
{
    int i=p;
    int j=mid;
    int k=0;
    int temp[q-p+1];
    while(i<=mid-1 and j<=q)
    {
        if(arr[i]>arr[j])
        {
            count+=(mid-i);
            temp[k++]=arr[j++];
        }
        else
            temp[k++]=arr[i++];
    }
    while(i<=mid-1)
    {
        temp[k++]=arr[i++];
    }
    while(j<=q)
    {
        temp[k++]=arr[j++];
    }
    k=0;
    for(int i=p;i<=q;i++)
    {
        arr[i]=temp[k++];
    }
   
}

void merge_sort(long long *arr,int p,int q,long long int &count)
{
    if(p<q)
    {    
        int mid=(p+q)/2;
        merge_sort(arr,p,mid,count);
        merge_sort(arr,mid+1,q,count);
       
        merge(arr,p,mid+1,q,count);
    }
}

long long getInversions(long long *arr, int n){
   
    long long int count=0;
   
    merge_sort(arr,0,n-1,count);
   
    return count;
}
